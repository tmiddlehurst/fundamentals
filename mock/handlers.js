/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
import { HttpResponse, http } from "msw";
import { faker } from "@faker-js/faker";

faker.seed(1);

const baseURL = "";
const MAX_ARRAY_LENGTH = 20;

let i = 0;
const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0;
  }
  return i++;
};

export const handlers = [
  http.get(`${baseURL}/stocks`, async () => {
    const resultArray = [
      [await getGetWatchedStocks200Response(), { status: 200 }],
      [await getGetWatchedStocks400Response(), { status: 400 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/stocks`, async () => {
    const resultArray = [
      [undefined, { status: 200 }],
      [await getAddStock400Response(), { status: 400 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/stocks`, async () => {
    const resultArray = [
      [undefined, { status: 200 }],
      [await getRemoveStock400Response(), { status: 400 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/stocks/:symbol`, async () => {
    const resultArray = [
      [undefined, { status: 200 }],
      [await getAddNote400Response(), { status: 400 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/stocks/:symbol/:noteId`, async () => {
    const resultArray = [
      [undefined, { status: 200 }],
      [await getDeleteNote400Response(), { status: 400 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/market-data/quote`, async () => {
    const resultArray = [
      [await getGetStockQuote200Response(), { status: 200 }],
      [await getGetStockQuote400Response(), { status: 400 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/market-data/time-series`, async () => {
    const resultArray = [
      [await getGetTimeSeriesData200Response(), { status: 200 }],
      [undefined, { status: 400 }],
      [undefined, { status: 404 }],
      [undefined, { status: 500 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/market-data/income-statement`, async () => {
    const resultArray = [
      [await getGetIncomeStatement200Response(), { status: 200 }],
      [undefined, { status: 400 }],
      [undefined, { status: 401 }],
      [undefined, { status: 404 }],
      [undefined, { status: 500 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
];

export function getGetWatchedStocks200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    name: "Apple",
    symbol: "AAPL",
    notes: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      date: faker.date.past(),
      id: faker.lorem.words(),
      price: faker.number.int(),
      notes: faker.lorem.words(),
      priceTarget: faker.number.int(),
      followUpDate: faker.date.past(),
      confidence: faker.number.int(),
    })),
  }));
}

export function getGetWatchedStocks400Response() {
  return null;
}

export function getAddStock400Response() {
  return null;
}

export function getRemoveStock400Response() {
  return null;
}

export function getAddNote400Response() {
  return null;
}

export function getDeleteNote400Response() {
  return null;
}

export function getGetStockQuote200Response() {
  return {
    symbol: "AAPL",
    name: "Apple Inc",
    exchange: "NASDAQ",
    mic_code: "XNAS",
    currency: "USD",
    datetime: "2021-09-16",
    timestamp: faker.number.int(),
    open: faker.helpers.fromRegExp(/^[0-9]{2,6}\.[0-9]{5}$/),
    high: faker.helpers.fromRegExp(/^[0-9]{2,6}\.[0-9]{5}$/),
    low: faker.helpers.fromRegExp(/^[0-9]{2,6}\.[0-9]{5}$/),
    close: faker.helpers.fromRegExp(/^[0-9]{2,6}\.[0-9]{5}$/),
    volume: faker.helpers.fromRegExp(/^[0-9]{2,6}\.[0-9]{5}$/),
    previous_close: faker.helpers.fromRegExp(/^[0-9]{2,6}\.[0-9]{5}$/),
    change: faker.helpers.fromRegExp(/^[0-9]{2,6}\.[0-9]{5}$/),
    percent_change: faker.helpers.fromRegExp(/^[0-9]{2,6}\.[0-9]{5}$/),
    average_volume: faker.helpers.fromRegExp(/^[0-9]/),
    rolling_1d_change: faker.helpers.fromRegExp(/^[0-9]{2,3}\.0[0-9]{1,2}$/),
    rolling_7d_change: faker.helpers.fromRegExp(/^[0-9]{2,3}\.0[0-9]{1,2}$/),
    rolling_period_change: faker.helpers.fromRegExp(
      /^[0-9]{2,3}\.0[0-9]{1,2}$/,
    ),
    is_market_open: faker.datatype.boolean(),
    fifty_two_week: {
      low: faker.helpers.fromRegExp(/^[0-9]{2,6}\.[0-9]{5}$/),
      high: faker.helpers.fromRegExp(/^[0-9]{2,6}\.[0-9]{5}$/),
      low_change: faker.helpers.fromRegExp(/^[0-9]{2,6}\.[0-9]{5}$/),
      high_change: faker.helpers.fromRegExp(/^[0-9]{2,6}\.[0-9]{5}$/),
      low_change_percent: faker.helpers.fromRegExp(/^[0-9]{2,6}\.[0-9]{5}$/),
      high_change_percent: faker.helpers.fromRegExp(/^[0-9]{2,6}\.[0-9]{5}$/),
      range: faker.helpers.fromRegExp(
        /^[0-9]{2,6}\.[0-9]{5}$ - [0-9]{2,6}\.[0-9]{5}$/,
      ),
    },
    extended_change: faker.helpers.fromRegExp(/^[0-9]{2}\.[0-9]{2}$/),
    extended_percent_change: faker.helpers.fromRegExp(/^[0-9]{2}\.[0-9]{2}$/),
    extended_price: faker.helpers.fromRegExp(/^[0-9]{1,2}\.[0-9]{2}$/),
    extended_timestamp: faker.number.int(),
  };
}

export function getGetStockQuote400Response() {
  return null;
}

export function getGetTimeSeriesData200Response() {
  return {
    meta: {
      symbol: "AAPL",
      interval: "1min",
      currency: "USD",
      exchange_timezone: "America/New_York",
      exchange: "NASDAQ",
      mic_code: "XNAS",
      type: "Common Stock",
    },
    values: [...new Array(faker.number.int({ min: 20, max: 500 })).keys()].map(
      (_) => ({
        datetime: "2021-09-16 15:55:00",
        open: faker.lorem.words(),
        high: faker.lorem.words(),
        low: faker.lorem.words(),
        close: faker.lorem.words(),
        volume: faker.lorem.words(),
      }),
    ),
    status: "ok",
  };
}

export function getGetIncomeStatement200Response() {
  return {
    meta: {
      symbol: "AAPL",
      name: "Apple Inc",
      currency: "USD",
      exchange: "NASDAQ",
      mic_code: "XNAS",
      exchange_timezone: "America/New_York",
      period: "Quarterly",
    },
    income_statement: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      fiscal_date: faker.date.past(),
      quarter: faker.number.int(),
      year: faker.number.int(),
      sales: faker.number.int(),
      cost_of_goods: faker.number.int(),
      gross_profit: faker.number.int(),
      operating_expense: {
        research_and_development: faker.number.int(),
        selling_general_and_administrative: faker.number.int(),
        other_operating_expenses: faker.number.int(),
      },
      operating_income: faker.number.int(),
      non_operating_interest: {
        income: faker.number.int(),
        expense: faker.number.int(),
      },
      other_income_expense: faker.number.int(),
      pretax_income: faker.number.int(),
      income_tax: faker.number.int(),
      net_income: faker.number.int(),
      eps_basic: faker.number.int(),
      eps_diluted: faker.number.int(),
      basic_shares_outstanding: faker.number.int(),
      diluted_shares_outstanding: faker.number.int(),
      ebitda: faker.number.int(),
      net_income_continuous_operations: faker.number.int(),
      minority_interests: faker.number.int(),
      preferred_stock_dividends: faker.number.int(),
    })),
  };
}
