/* tslint:disable */
/* eslint-disable */
/**
 * Fundamental Stocks API
 * Add, remove, add notes to watched stocks
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddStockRequest
 */
export interface AddStockRequest {
    /**
     * 
     * @type {string}
     * @memberof AddStockRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddStockRequest
     */
    'symbol'?: string;
}
/**
 * 
 * @export
 * @interface Note
 */
export interface Note {
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Note
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    'notes': string;
    /**
     * 
     * @type {number}
     * @memberof Note
     */
    'priceTarget'?: number;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    'followUpDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof Note
     */
    'confidence'?: number;
}
/**
 * A Problem Details object (RFC 9457).  Additional properties specific to the problem type may be present. 
 * @export
 * @interface Problem
 */
export interface Problem {
    /**
     * An absolute URI that identifies the problem type
     * @type {string}
     * @memberof Problem
     */
    'type'?: string;
    /**
     * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
     * @type {string}
     * @memberof Problem
     */
    'href'?: string;
    /**
     * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
     * @type {string}
     * @memberof Problem
     */
    'title'?: string;
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     * @type {number}
     * @memberof Problem
     */
    'status'?: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem
     * @type {string}
     * @memberof Problem
     */
    'detail'?: string;
    /**
     * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
     * @type {string}
     * @memberof Problem
     */
    'instance'?: string;
}
/**
 * 
 * @export
 * @interface Stock
 */
export interface Stock {
    /**
     * 
     * @type {string}
     * @memberof Stock
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Stock
     */
    'symbol'?: string;
    /**
     * 
     * @type {Array<Note>}
     * @memberof Stock
     */
    'notes'?: Array<Note>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add analysis note to a watched stock
         * @param {string} symbol 
         * @param {Note} note 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNote: async (symbol: string, note: Note, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('addNote', 'symbol', symbol)
            // verify required parameter 'note' is not null or undefined
            assertParamExists('addNote', 'note', note)
            const localVarPath = `/stocks/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(note, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a new stock
         * @param {AddStockRequest} addStockRequest Stock object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStock: async (addStockRequest: AddStockRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addStockRequest' is not null or undefined
            assertParamExists('addStock', 'addStockRequest', addStockRequest)
            const localVarPath = `/stocks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addStockRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a note from a watched stock
         * @param {string} symbol Stock ticker symbol
         * @param {string} noteId Note ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNote: async (symbol: string, noteId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('deleteNote', 'symbol', symbol)
            // verify required parameter 'noteId' is not null or undefined
            assertParamExists('deleteNote', 'noteId', noteId)
            const localVarPath = `/stocks/{symbol}/{noteId}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)))
                .replace(`{${"noteId"}}`, encodeURIComponent(String(noteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve list of watched stocks
         * @summary Get a list of stocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWatchedStocks: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stocks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a watched stock from watchlist
         * @param {string} symbol Stock ticker symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeStock: async (symbol: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('removeStock', 'symbol', symbol)
            const localVarPath = `/stocks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add analysis note to a watched stock
         * @param {string} symbol 
         * @param {Note} note 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNote(symbol: string, note: Note, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNote(symbol, note, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addNote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add a new stock
         * @param {AddStockRequest} addStockRequest Stock object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addStock(addStockRequest: AddStockRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addStock(addStockRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addStock']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove a note from a watched stock
         * @param {string} symbol Stock ticker symbol
         * @param {string} noteId Note ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNote(symbol: string, noteId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNote(symbol, noteId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteNote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve list of watched stocks
         * @summary Get a list of stocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWatchedStocks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Stock>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWatchedStocks(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWatchedStocks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove a watched stock from watchlist
         * @param {string} symbol Stock ticker symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeStock(symbol: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeStock(symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.removeStock']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Add analysis note to a watched stock
         * @param {string} symbol 
         * @param {Note} note 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNote(symbol: string, note: Note, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addNote(symbol, note, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a new stock
         * @param {AddStockRequest} addStockRequest Stock object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStock(addStockRequest: AddStockRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addStock(addStockRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a note from a watched stock
         * @param {string} symbol Stock ticker symbol
         * @param {string} noteId Note ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNote(symbol: string, noteId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteNote(symbol, noteId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve list of watched stocks
         * @summary Get a list of stocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWatchedStocks(options?: RawAxiosRequestConfig): AxiosPromise<Array<Stock>> {
            return localVarFp.getWatchedStocks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a watched stock from watchlist
         * @param {string} symbol Stock ticker symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeStock(symbol: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeStock(symbol, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Add analysis note to a watched stock
     * @param {string} symbol 
     * @param {Note} note 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addNote(symbol: string, note: Note, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addNote(symbol, note, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a new stock
     * @param {AddStockRequest} addStockRequest Stock object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addStock(addStockRequest: AddStockRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addStock(addStockRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a note from a watched stock
     * @param {string} symbol Stock ticker symbol
     * @param {string} noteId Note ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteNote(symbol: string, noteId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteNote(symbol, noteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve list of watched stocks
     * @summary Get a list of stocks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWatchedStocks(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWatchedStocks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a watched stock from watchlist
     * @param {string} symbol Stock ticker symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public removeStock(symbol: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).removeStock(symbol, options).then((request) => request(this.axios, this.basePath));
    }
}



